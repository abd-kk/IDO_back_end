// <auto-generated />
using System;
using IDO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IDO.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240129101446_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IDO.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3afa697b-d5c1-4ffe-bf00-450971255000",
                            Email = "abdallahkorhani1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ABDALLAHKORHANI1@GMAIL.COM",
                            NormalizedUserName = "ABDALLAH",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzxXzoVO9oaE5s0HlaEdy09lfzkFPfsePdgOR6BNk3dNl0yG7Odc28Ml9QXkZlZAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36c3f4c8-88ab-421e-a892-d5278dba4935",
                            TwoFactorEnabled = false,
                            UserName = "abdallah"
                        });
                });

            modelBuilder.Entity("IDO.Models.TaskImportance", b =>
                {
                    b.Property<int>("taskImportanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("taskImportanceId"), 1L, 1);

                    b.Property<string>("taskImportanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("taskImportanceId");

                    b.ToTable("TaskImportances");

                    b.HasData(
                        new
                        {
                            taskImportanceId = 1,
                            taskImportanceName = "Low"
                        },
                        new
                        {
                            taskImportanceId = 2,
                            taskImportanceName = "Medium"
                        },
                        new
                        {
                            taskImportanceId = 3,
                            taskImportanceName = "High"
                        });
                });

            modelBuilder.Entity("IDO.Models.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("taskCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("taskDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("taskEstimate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("taskImportanceId")
                        .HasColumnType("int");

                    b.Property<string>("taskTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("taskImportanceId");

                    b.HasIndex("userId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusId = 1,
                            taskCategory = "Fixing",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "2 hours",
                            taskImportanceId = 1,
                            taskTitle = "Fixing Laptop",
                            userId = 1
                        },
                        new
                        {
                            Id = 2,
                            StatusId = 2,
                            taskCategory = "job opportunity",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "3 hours",
                            taskImportanceId = 3,
                            taskTitle = "Assessment",
                            userId = 1
                        },
                        new
                        {
                            Id = 3,
                            StatusId = 3,
                            taskCategory = "senior",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "1 hour",
                            taskImportanceId = 2,
                            taskTitle = "Senior project",
                            userId = 1
                        },
                        new
                        {
                            Id = 4,
                            StatusId = 1,
                            taskCategory = "Sport",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "2 hours",
                            taskImportanceId = 3,
                            taskTitle = "Football",
                            userId = 1
                        },
                        new
                        {
                            Id = 5,
                            StatusId = 1,
                            taskCategory = "Reading",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "1 hour",
                            taskImportanceId = 1,
                            taskTitle = "Reading a book",
                            userId = 1
                        },
                        new
                        {
                            Id = 6,
                            StatusId = 1,
                            taskCategory = "idk",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "1 hour",
                            taskImportanceId = 3,
                            taskTitle = "Vsisiting grandma",
                            userId = 1
                        },
                        new
                        {
                            Id = 7,
                            StatusId = 1,
                            taskCategory = "Fixing",
                            taskDueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            taskEstimate = "2 hour",
                            taskImportanceId = 1,
                            taskTitle = "Fixing TV",
                            userId = 1
                        });
                });

            modelBuilder.Entity("IDO.Models.ToDoTaskStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("ToDoTaskStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "To Do"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Doing"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Done"
                        });
                });

            modelBuilder.Entity("IDO.Models.ToDoTask", b =>
                {
                    b.HasOne("IDO.Models.ToDoTaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDO.Models.TaskImportance", "TaskImportance")
                        .WithMany()
                        .HasForeignKey("taskImportanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDO.Models.AppUser", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("TaskImportance");

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
